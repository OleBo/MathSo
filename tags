!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
FloatSlider	math_so/model/lotka_volterra.py	/^from ipywidgets.widgets import interact, IntRangeSlider, FloatSlider, Layout$/;"	i
IntRangeSlider	math_so/model/lotka_volterra.py	/^from ipywidgets.widgets import interact, IntRangeSlider, FloatSlider, Layout$/;"	i
Layout	math_so/model/lotka_volterra.py	/^from ipywidgets.widgets import interact, IntRangeSlider, FloatSlider, Layout$/;"	i
TestUtils	tests/test_utils.py	/^class TestUtils(unittest.TestCase):$/;"	c
__all__	math_so/__init__.py	/^__all__ = ['animate_bisection']$/;"	v
__all__	math_so/utils/__init__.py	/^__all__ = ['say_hello_world', 'absolute_error', 'relative_error',$/;"	v
__version__	math_so/__init__.py	/^__version__ = '0.1.0'$/;"	v
__version__	tests/test_math_so.py	/^from math_so import __version__$/;"	i
_f	math_so/animate_bisection.py	/^    def _f(_x):$/;"	f	function:main
absolute_error	math_so/utils/__init__.py	/^from .approx_error import absolute_error, relative_error, signif$/;"	i
absolute_error	math_so/utils/approx_error.py	/^def absolute_error(value, approx):$/;"	f
absolute_error	tests/test_utils.py	/^from math_so.utils import (say_hello_world, absolute_error, relative_error,$/;"	i
animate	math_so/animate_bisection.py	/^    def animate(i):$/;"	f	function:animate_bisection
animate_bisection	math_so/__init__.py	/^from .animate_bisection import (animate_bisection)$/;"	i
animate_bisection	math_so/animate_bisection.py	/^def animate_bisection(_f, xmin, xmax):$/;"	f
animate_bisection	scripts/animate_bisection.py	/^from math_so import animate_bisection$/;"	i
animation	math_so/animate_bisection.py	/^from matplotlib import animation$/;"	i
argparse	math_so/animate_bisection.py	/^import argparse$/;"	i
argv	math_so/animate_bisection.py	/^    argv = parser.parse_args()$/;"	v
bisect	math_so/animate_bisection.py	/^def bisect(_f, _a, _b):$/;"	f
bisection	math_so/utils/__init__.py	/^from .nonlinear_systems import (bisection, newton, heron, secant_method,$/;"	i
bisection	math_so/utils/nonlinear_systems.py	/^def bisection(func, _a, _b, tol, termination_criterion='x'):$/;"	f
bisection_method	math_so/animate_bisection.py	/^def bisection_method(_f, _a, _b, _n):$/;"	f
check_termination_criterion	math_so/utils/nonlinear_systems.py	/^    def check_termination_criterion(_x, _a, _b, tol):$/;"	f	function:bisection
check_termination_criterion	math_so/utils/nonlinear_systems.py	/^    def check_termination_criterion(_x, _a, _b, tol):$/;"	f	function:regula_falsi
check_termination_criterion	math_so/utils/nonlinear_systems.py	/^    def check_termination_criterion(_x, _dx, tol):$/;"	f	function:newton
check_termination_criterion	math_so/utils/nonlinear_systems.py	/^    def check_termination_criterion(_x, _dx, tol):$/;"	f	function:secant_method
dfunc	math_so/utils/nonlinear_systems.py	/^    def dfunc(_x):$/;"	f	function:heron
fpiterate	math_so/utils/nonlinear_systems.py	/^def fpiterate(func, _x0, tol, maxits=100):$/;"	f
func	math_so/utils/nonlinear_systems.py	/^    def func(_x):$/;"	f	function:heron
heron	math_so/utils/__init__.py	/^from .nonlinear_systems import (bisection, newton, heron, secant_method,$/;"	i
heron	math_so/utils/nonlinear_systems.py	/^def heron(_a, tol, _x0=None, termination_criterion='x'):$/;"	f
init	math_so/animate_bisection.py	/^    def init():$/;"	f	function:animate_bisection
interact	math_so/model/lotka_volterra.py	/^from ipywidgets.widgets import interact, IntRangeSlider, FloatSlider, Layout$/;"	i
interactive	math_so/model/lotka_volterra.py	/^def interactive():$/;"	f
logging	math_so/animate_bisection.py	/^import logging$/;"	i
logging	math_so/utils/nonlinear_systems.py	/^import logging$/;"	i
main	math_so/animate_bisection.py	/^def main(args, loglevel):$/;"	f
main	math_so/model/lotka_volterra.py	/^def main(alpha=0.4, beta=0.04, gamma=0.02, delta=2, y0_0=105, y0_1=8,$/;"	f
math	scripts/animate_bisection.py	/^import math$/;"	i
math	tests/test_utils.py	/^import math$/;"	i
matplotlib	math_so/animate_bisection.py	/^import matplotlib.pyplot as plt$/;"	i
newton	math_so/utils/__init__.py	/^from .nonlinear_systems import (bisection, newton, heron, secant_method,$/;"	i
newton	math_so/utils/nonlinear_systems.py	/^def newton(func, _df, _x0, tol, maxits=100, termination_criterion='x'):$/;"	f
np	math_so/animate_bisection.py	/^import numpy as np$/;"	i
np	math_so/model/lotka_volterra.py	/^import numpy as np$/;"	i
np	math_so/utils/approx_error.py	/^import numpy as np$/;"	i
np	scripts/animate_bisection.py	/^import numpy as np$/;"	i
np	tests/test_utils.py	/^import numpy as np$/;"	i
parser	math_so/animate_bisection.py	/^    parser = argparse.ArgumentParser($/;"	v
plt	math_so/animate_bisection.py	/^import matplotlib.pyplot as plt$/;"	i
plt	math_so/model/lotka_volterra.py	/^from matplotlib import pyplot as plt$/;"	i
positional2decimal	math_so/utils/__init__.py	/^from .floating_point import positional2decimal$/;"	i
positional2decimal	math_so/utils/floating_point.py	/^def positional2decimal(number, base):$/;"	f
regula_falsi	math_so/utils/nonlinear_systems.py	/^def regula_falsi(func, _a, _b, tol, termination_criterion='x'):$/;"	f
relative_error	math_so/utils/__init__.py	/^from .approx_error import absolute_error, relative_error, signif$/;"	i
relative_error	math_so/utils/approx_error.py	/^def relative_error(value, approx):$/;"	f
relative_error	tests/test_utils.py	/^from math_so.utils import (say_hello_world, absolute_error, relative_error,$/;"	i
say_hello_world	math_so/utils/__init__.py	/^from .hello_world import say_hello_world$/;"	i
say_hello_world	math_so/utils/hello_world.py	/^def say_hello_world():$/;"	f
say_hello_world	scripts/say-hello-world.py	/^from math_so.utils import say_hello_world$/;"	i
say_hello_world	tests/test_utils.py	/^from math_so.utils import (say_hello_world, absolute_error, relative_error,$/;"	i
secant_method	math_so/utils/__init__.py	/^from .nonlinear_systems import (bisection, newton, heron, secant_method,$/;"	i
secant_method	math_so/utils/nonlinear_systems.py	/^def secant_method(func, _x0, _x1, tol, maxits=100, termination_criterion='x'):$/;"	f
sgn	math_so/animate_bisection.py	/^def sgn(_x):$/;"	f
signif	math_so/utils/__init__.py	/^from .approx_error import absolute_error, relative_error, signif$/;"	i
signif	math_so/utils/approx_error.py	/^def signif(number, significant_digits):$/;"	f
slider_layout	math_so/model/lotka_volterra.py	/^slider_layout = Layout(width='99%')$/;"	v
solve_ivp	math_so/model/lotka_volterra.py	/^from scipy.integrate import solve_ivp$/;"	i
style	math_so/model/lotka_volterra.py	/^style = {'description_width': '150px'}$/;"	v
test_main	tests/test_utils.py	/^    def test_main(self):$/;"	m	class:TestUtils
test_nonlinear	tests/test_utils.py	/^    def test_nonlinear(self):$/;"	m	class:TestUtils
test_version	tests/test_math_so.py	/^def test_version():$/;"	f
unittest	tests/test_utils.py	/^import unittest$/;"	i
